version: '3'

services:
  app:
    container_name: people-api
    build:
      context: ..
      dockerfile: .devcontainer/Dockerfile
      args:
        # [Choice] Python version: 3, 3.8, 3.7, 3.6
        VARIANT: 3
        # [Choice] Node.js version: none, lts/*, 16, 14, 12, 10
        NODE_VERSION: "lts/*"
        # On Linux, you may need to update USER_UID and USER_GID below if not your local UID is not 1000.
        USER_UID: 1000
        USER_GID: 1000

    volumes:
      - ..:/workspace:cached

    # Overrides default command so things don't shut down after the process ends.
    command: sleep infinity

    # Runs app on the same network as the database container, allows "forwardPorts" in devcontainer.json function.
    network_mode: service:db

    # Uncomment the next line to use a non-root user for all processes.
    # user: vscode

    # Use "forwardPorts" in **devcontainer.json** to forward an app port locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)

    environment:
      DATABASE_URL: postgres://postgres:postgres@db:5432/postgres
      APP_ENV: ðŸ› 

  db:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

    # Add "forwardPorts": ["5432"] to **devcontainer.json** to forward PostgreSQL locally.
    # (Adding the "ports" property to this file will not forward from a Codespace.)

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    network_mode: service:db
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    restart: unless-stopped
    network_mode: service:db

  minio:
    image: quay.io/minio/minio:latest
    container_name: minio
    restart: unless-stopped
    network_mode: service:db
    command: minio --compat server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    volumes:
      - minio-data:/data

volumes:
  redis-data:
  postgres-data:
  minio-data:
